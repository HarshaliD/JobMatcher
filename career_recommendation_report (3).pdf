<!doctype html>
<html lang=en>
  <head>
    <title>TypeError: expected str, bytes or os.PathLike object, not BytesIO
 // Werkzeug Debugger</title>
    <link rel="stylesheet" href="?__debugger__=yes&amp;cmd=resource&amp;f=style.css">
    <link rel="shortcut icon"
        href="?__debugger__=yes&amp;cmd=resource&amp;f=console.png">
    <script src="?__debugger__=yes&amp;cmd=resource&amp;f=debugger.js"></script>
    <script>
      var CONSOLE_MODE = false,
          EVALEX = true,
          EVALEX_TRUSTED = false,
          SECRET = "x1f0NJkD574RqTF9llQv";
    </script>
  </head>
  <body style="background-color: #fff">
    <div class="debugger">
<h1>TypeError</h1>
<div class="detail">
  <p class="errormsg">TypeError: expected str, bytes or os.PathLike object, not BytesIO
</p>
</div>
<h2 class="traceback">Traceback <em>(most recent call last)</em></h2>
<div class="traceback">
  <h3></h3>
  <ul><li><div class="frame" id="frame-2058470317520">
  <h4>File <cite class="filename">"C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1536</em>,
      in <code class="function">__call__</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">    </span>) -&gt; cabc.Iterable[bytes]:</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;The WSGI server calls the Flask application object as the</pre>
<pre class="line before"><span class="ws">        </span>WSGI application. This calls :meth:`wsgi_app`, which can be</pre>
<pre class="line before"><span class="ws">        </span>wrapped to apply middleware.</pre>
<pre class="line before"><span class="ws">        </span>&#34;&#34;&#34;</pre>
<pre class="line current"><span class="ws">        </span>return self.wsgi_app(environ, start_response)</pre></div>
</div>

<li><div class="frame" id="frame-2058470317408">
  <h4>File <cite class="filename">"C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1514</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line before"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line before"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line before"><span class="ws">                </span>error = e</pre>
<pre class="line current"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre>
<pre class="line after"><span class="ws">                </span>raise</pre>
<pre class="line after"><span class="ws">            </span>return response(environ, start_response)</pre>
<pre class="line after"><span class="ws">        </span>finally:</pre></div>
</div>

<li><div class="frame" id="frame-2058470317184">
  <h4>File <cite class="filename">"C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">1511</em>,
      in <code class="function">wsgi_app</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">        </span>ctx = self.request_context(environ)</pre>
<pre class="line before"><span class="ws">        </span>error: BaseException | None = None</pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>try:</pre>
<pre class="line before"><span class="ws">                </span>ctx.push()</pre>
<pre class="line current"><span class="ws">                </span>response = self.full_dispatch_request()</pre>
<pre class="line after"><span class="ws">            </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">                </span>error = e</pre>
<pre class="line after"><span class="ws">                </span>response = self.handle_exception(e)</pre>
<pre class="line after"><span class="ws">            </span>except:  # noqa: B001</pre>
<pre class="line after"><span class="ws">                </span>error = sys.exc_info()[1]</pre></div>
</div>

<li><div class="frame" id="frame-2058470317072">
  <h4>File <cite class="filename">"C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">919</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line before"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line before"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line current"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre>
<pre class="line after"><span class="ws">        </span>self,</pre>
<pre class="line after"><span class="ws">        </span>rv: ft.ResponseReturnValue | HTTPException,</pre></div>
</div>

<li><div class="frame" id="frame-2058470317632">
  <h4>File <cite class="filename">"C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">917</em>,
      in <code class="function">full_dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">        </span>try:</pre>
<pre class="line before"><span class="ws">            </span>request_started.send(self, _async_wrapper=self.ensure_sync)</pre>
<pre class="line before"><span class="ws">            </span>rv = self.preprocess_request()</pre>
<pre class="line before"><span class="ws">            </span>if rv is None:</pre>
<pre class="line current"><span class="ws">                </span>rv = self.dispatch_request()</pre>
<pre class="line after"><span class="ws">        </span>except Exception as e:</pre>
<pre class="line after"><span class="ws">            </span>rv = self.handle_user_exception(e)</pre>
<pre class="line after"><span class="ws">        </span>return self.finalize_request(rv)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def finalize_request(</pre></div>
</div>

<li><div class="frame" id="frame-2058470317968">
  <h4>File <cite class="filename">"C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\flask\app.py"</cite>,
      line <em class="line">902</em>,
      in <code class="function">dispatch_request</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>and req.method == &#34;OPTIONS&#34;</pre>
<pre class="line before"><span class="ws">        </span>):</pre>
<pre class="line before"><span class="ws">            </span>return self.make_default_options_response()</pre>
<pre class="line before"><span class="ws">        </span># otherwise dispatch to the handler for that endpoint</pre>
<pre class="line before"><span class="ws">        </span>view_args: dict[str, t.Any] = req.view_args  # type: ignore[assignment]</pre>
<pre class="line current"><span class="ws">        </span>return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>def full_dispatch_request(self) -&gt; Response:</pre>
<pre class="line after"><span class="ws">        </span>&#34;&#34;&#34;Dispatches the request and on top of that performs request</pre>
<pre class="line after"><span class="ws">        </span>pre and postprocessing as well as HTTP exception catching and</pre>
<pre class="line after"><span class="ws">        </span>error handling.</pre></div>
</div>

<li><div class="frame" id="frame-2058470317856">
  <h4>File <cite class="filename">"C:\Users\lenovo\Documents\GIT\ML End to End\JobMatcher\app.py"</cite>,
      line <em class="line">152</em>,
      in <code class="function">recommend</code></h4>
  <div class="source "><pre class="line before"><span class="ws">    </span>pdf.chapter_title(&#34;Career Preparation Guide&#34;)</pre>
<pre class="line before"><span class="ws">    </span>pdf.chapter_body(response_text)</pre>
<pre class="line before"><span class="ws"></span> </pre>
<pre class="line before"><span class="ws">    </span># Save the PDF to a file in memory</pre>
<pre class="line before"><span class="ws">    </span>pdf_output = io.BytesIO()</pre>
<pre class="line current"><span class="ws">    </span>pdf.output(pdf_output)</pre>
<pre class="line after"><span class="ws">    </span>pdf_output.seek(0)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws">    </span>return send_file(pdf_output, as_attachment=True, download_name=&#39;career_recommendation_report.pdf&#39;, mimetype=&#39;application/pdf&#39;)</pre>
<pre class="line after"><span class="ws"></span> </pre>
<pre class="line after"><span class="ws"></span># Run the app</pre></div>
</div>

<li><div class="frame" id="frame-2058470317744">
  <h4>File <cite class="filename">"C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\fpdf\fpdf.py"</cite>,
      line <em class="line">1079</em>,
      in <code class="function">output</code></h4>
  <div class="source library"><pre class="line before"><span class="ws">            </span>print(self.buffer)</pre>
<pre class="line before"><span class="ws">        </span>elif dest==&#39;D&#39;:</pre>
<pre class="line before"><span class="ws">            </span>print(self.buffer)</pre>
<pre class="line before"><span class="ws">        </span>elif dest==&#39;F&#39;:</pre>
<pre class="line before"><span class="ws">            </span>#Save to local file</pre>
<pre class="line current"><span class="ws">            </span>f=open(name,&#39;wb&#39;)</pre>
<pre class="line after"><span class="ws">            </span>if(not f):</pre>
<pre class="line after"><span class="ws">                </span>self.error(&#39;Unable to create output file: &#39;+name)</pre>
<pre class="line after"><span class="ws">            </span>if PY3K:</pre>
<pre class="line after"><span class="ws">                </span># manage binary data as latin1 until PEP461 or similar is implemented</pre>
<pre class="line after"><span class="ws">                </span>f.write(self.buffer.encode(&#34;latin1&#34;))</pre></div>
</div>
</ul>
  <blockquote>TypeError: expected str, bytes or os.PathLike object, not BytesIO
</blockquote>
</div>

<div class="plain">
    <p>
      This is the Copy/Paste friendly version of the traceback.
    </p>
    <textarea cols="50" rows="10" name="code" readonly>Traceback (most recent call last):
  File &#34;C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\flask\app.py&#34;, line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File &#34;C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\flask\app.py&#34;, line 1514, in wsgi_app
    response = self.handle_exception(e)
  File &#34;C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\flask\app.py&#34;, line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File &#34;C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\flask\app.py&#34;, line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File &#34;C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\flask\app.py&#34;, line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File &#34;C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\flask\app.py&#34;, line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File &#34;C:\Users\lenovo\Documents\GIT\ML End to End\JobMatcher\app.py&#34;, line 152, in recommend
    pdf.output(pdf_output)
  File &#34;C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\fpdf\fpdf.py&#34;, line 1079, in output
    f=open(name,&#39;wb&#39;)
TypeError: expected str, bytes or os.PathLike object, not BytesIO
</textarea>
</div>
<div class="explanation">
  The debugger caught an exception in your WSGI application.  You can now
  look at the traceback which led to the error.  <span class="nojavascript">
  If you enable JavaScript you can also use additional features such as code
  execution (if the evalex feature is enabled), automatic pasting of the
  exceptions and much more.</span>
</div>
      <div class="footer">
        Brought to you by <strong class="arthur">DON'T PANIC</strong>, your
        friendly Werkzeug powered traceback interpreter.
      </div>
    </div>

    <div class="pin-prompt">
      <div class="inner">
        <h3>Console Locked</h3>
        <p>
          The console is locked and needs to be unlocked by entering the PIN.
          You can find the PIN printed out on the standard output of your
          shell that runs the server.
        <form>
          <p>PIN:
            <input type=text name=pin size=14>
            <input type=submit name=btn value="Confirm Pin">
        </form>
      </div>
    </div>
  </body>
</html>

<!--

Traceback (most recent call last):
  File "C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\flask\app.py", line 1536, in __call__
    return self.wsgi_app(environ, start_response)
  File "C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\flask\app.py", line 1514, in wsgi_app
    response = self.handle_exception(e)
  File "C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\flask\app.py", line 1511, in wsgi_app
    response = self.full_dispatch_request()
  File "C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\flask\app.py", line 919, in full_dispatch_request
    rv = self.handle_user_exception(e)
  File "C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\flask\app.py", line 917, in full_dispatch_request
    rv = self.dispatch_request()
  File "C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\flask\app.py", line 902, in dispatch_request
    return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)  # type: ignore[no-any-return]
  File "C:\Users\lenovo\Documents\GIT\ML End to End\JobMatcher\app.py", line 152, in recommend
    pdf.output(pdf_output)
  File "C:\Users\lenovo\Documents\GIT\ML End to End\venv\lib\site-packages\fpdf\fpdf.py", line 1079, in output
    f=open(name,'wb')
TypeError: expected str, bytes or os.PathLike object, not BytesIO


-->
